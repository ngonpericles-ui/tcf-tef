const axios = require('axios');

async function populateSampleData() {
  try {
    console.log('üöÄ Populating Sample Data for Admin Pages...\n');
    
    // Login as admin
    const loginResponse = await axios.post('http://localhost:3001/api/auth/login', {
      email: 'admin@tcftef.com',
      password: 'AdminTest123!'
    });

    if (!loginResponse.data.success) {
      console.log('‚ùå Login failed');
      return;
    }

    const token = loginResponse.data.data.tokens.accessToken;
    const headers = { 'Authorization': `Bearer ${token}` };
    
    console.log('‚úÖ Admin logged in successfully\n');

    // Create sample posts
    console.log('1. Creating Sample Posts...');
    const samplePosts = [
      {
        title: 'Guide Complet TCF - Niveau A1',
        content: 'Un guide d√©taill√© pour pr√©parer le TCF niveau A1 avec des exercices pratiques et des conseils d\'experts.',
        level: 'A1',
        type: 'GUIDE',
        tags: ['TCF', 'A1', 'Pr√©paration'],
        isPublished: true
      },
      {
        title: 'Exercices TEF - Expression Orale B2',
        content: 'Collection d\'exercices pour am√©liorer votre expression orale pour le TEF niveau B2.',
        level: 'B2',
        type: 'EXERCISE',
        tags: ['TEF', 'B2', 'Expression Orale'],
        isPublished: true
      },
      {
        title: 'Vocabulaire Essentiel C1',
        content: 'Liste compl√®te du vocabulaire essentiel pour atteindre le niveau C1 en fran√ßais.',
        level: 'C1',
        type: 'VOCABULARY',
        tags: ['Vocabulaire', 'C1', 'Avanc√©'],
        isPublished: true
      }
    ];

    for (const post of samplePosts) {
      try {
        const response = await axios.post('http://localhost:3001/api/posts', post, { headers });
        if (response.data.success) {
          console.log(`‚úÖ Created post: ${post.title}`);
        }
      } catch (error) {
        console.log(`‚ùå Failed to create post: ${post.title} - ${error.response?.data?.message || error.message}`);
      }
    }

    // Create sample courses
    console.log('\n2. Creating Sample Courses...');
    const sampleCourses = [
      {
        title: 'Cours TCF Complet - Niveau D√©butant',
        description: 'Formation compl√®te pour pr√©parer le TCF niveau d√©butant (A1-A2)',
        level: 'A1',
        category: 'TCF_TEF',
        requiredTier: 'FREE',
        duration: 120,
        lessons: 15,
        difficulty: 1,
        tags: ['TCF', 'D√©butant', 'A1']
      },
      {
        title: 'Pr√©paration TEF Intensif - Niveau Interm√©diaire',
        description: 'Programme intensif pour r√©ussir le TEF niveau interm√©diaire (B1-B2)',
        level: 'B1',
        category: 'TCF_TEF',
        requiredTier: 'ESSENTIAL',
        duration: 180,
        lessons: 20,
        difficulty: 3,
        tags: ['TEF', 'Interm√©diaire', 'B1']
      },
      {
        title: 'Ma√Ætrise du Fran√ßais - Niveau Avanc√©',
        description: 'Cours avanc√© pour atteindre la ma√Ætrise du fran√ßais (C1-C2)',
        level: 'C1',
        category: 'GRAMMAR',
        requiredTier: 'PREMIUM',
        duration: 240,
        lessons: 25,
        difficulty: 5,
        tags: ['Avanc√©', 'C1', 'Grammaire']
      }
    ];

    for (const course of sampleCourses) {
      try {
        const response = await axios.post('http://localhost:3001/api/courses', course, { headers });
        if (response.data.success) {
          console.log(`‚úÖ Created course: ${course.title}`);
        }
      } catch (error) {
        console.log(`‚ùå Failed to create course: ${course.title} - ${error.response?.data?.message || error.message}`);
      }
    }

    // Create sample tests
    console.log('\n3. Creating Sample Tests...');
    const sampleTests = [
      {
        title: 'Test de Niveau TCF - √âvaluation A1',
        description: 'Test d\'√©valuation pour d√©terminer votre niveau A1 en fran√ßais',
        type: 'TCF',
        level: 'A1',
        category: 'TCF_TEF',
        requiredTier: 'FREE',
        duration: 60,
        questionCount: 30,
        difficulty: 1,
        passingScore: 70,
        tags: ['TCF', 'A1', '√âvaluation']
      },
      {
        title: 'Simulation TEF - Compr√©hension √âcrite B2',
        description: 'Simulation compl√®te de l\'√©preuve de compr√©hension √©crite du TEF niveau B2',
        type: 'TEF',
        level: 'B2',
        category: 'READING',
        requiredTier: 'ESSENTIAL',
        duration: 90,
        questionCount: 40,
        difficulty: 3,
        passingScore: 75,
        tags: ['TEF', 'B2', 'Compr√©hension']
      },
      {
        title: 'Test Avanc√© - Expression √âcrite C1',
        description: 'Test avanc√© pour √©valuer vos comp√©tences en expression √©crite niveau C1',
        type: 'PRACTICE',
        level: 'C1',
        category: 'WRITING',
        requiredTier: 'PREMIUM',
        duration: 120,
        questionCount: 25,
        difficulty: 5,
        passingScore: 80,
        tags: ['Avanc√©', 'C1', 'Expression']
      }
    ];

    for (const test of sampleTests) {
      try {
        const response = await axios.post('http://localhost:3001/api/tests', test, { headers });
        if (response.data.success) {
          console.log(`‚úÖ Created test: ${test.title}`);
        }
      } catch (error) {
        console.log(`‚ùå Failed to create test: ${test.title} - ${error.response?.data?.message || error.message}`);
      }
    }

    // Create sample notifications
    console.log('\n4. Creating Sample Notifications...');
    const sampleNotifications = [
      {
        title: 'Nouvelle fonctionnalit√© disponible',
        message: 'D√©couvrez notre nouveau simulateur de test TCF avec correction automatique!',
        type: 'INFO',
        priority: 'medium'
      },
      {
        title: 'Maintenance programm√©e',
        message: 'Maintenance syst√®me pr√©vue le dimanche 15 septembre de 2h √† 4h du matin.',
        type: 'WARNING',
        priority: 'high'
      },
      {
        title: 'Nouveau cours disponible',
        message: 'Le cours "Ma√Ætrise du Fran√ßais - Niveau Avanc√©" est maintenant disponible!',
        type: 'SUCCESS',
        priority: 'low'
      }
    ];

    for (const notification of sampleNotifications) {
      try {
        const response = await axios.post('http://localhost:3001/api/notifications', notification, { headers });
        if (response.data.success) {
          console.log(`‚úÖ Created notification: ${notification.title}`);
        }
      } catch (error) {
        console.log(`‚ùå Failed to create notification: ${notification.title} - ${error.response?.data?.message || error.message}`);
      }
    }

    // Create sample live sessions
    console.log('\n5. Creating Sample Live Sessions...');
    const sampleSessions = [
      {
        title: 'Session Live TCF - Pr√©paration A2',
        description: 'Session interactive pour pr√©parer le TCF niveau A2 avec un expert',
        instructor: 'Prof. Marie Dubois',
        date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Tomorrow
        duration: 90,
        maxParticipants: 20,
        requiredTier: 'FREE',
        level: 'A2',
        category: 'TCF_TEF',
        tags: ['TCF', 'A2', 'Pr√©paration']
      },
      {
        title: 'Atelier TEF - Expression Orale B1',
        description: 'Atelier pratique pour am√©liorer votre expression orale en fran√ßais',
        instructor: 'Prof. Jean Martin',
        date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(), // Day after tomorrow
        duration: 120,
        maxParticipants: 15,
        requiredTier: 'ESSENTIAL',
        level: 'B1',
        category: 'ORAL',
        tags: ['TEF', 'B1', 'Expression Orale']
      }
    ];

    for (const session of sampleSessions) {
      try {
        const response = await axios.post('http://localhost:3001/api/live-sessions', session, { headers });
        if (response.data.success) {
          console.log(`‚úÖ Created session: ${session.title}`);
        }
      } catch (error) {
        console.log(`‚ùå Failed to create session: ${session.title} - ${error.response?.data?.message || error.message}`);
      }
    }

    console.log('\nüéâ Sample data population completed!');
    console.log('\nüìä Summary:');
    console.log('- Created sample posts for content management');
    console.log('- Created sample courses for course management');
    console.log('- Created sample tests for test management');
    console.log('- Created sample notifications for notification system');
    console.log('- Created sample live sessions for session management');
    console.log('\nüåê Admin pages should now show populated data!');
    console.log('   Visit: http://localhost:3002/admin');

  } catch (error) {
    console.log('‚ùå Population failed:', error.message);
  }
}

populateSampleData();
